shader_type canvas_item;

uniform sampler2D noise;

// From: https://stackoverflow.com/a/17897228
// All components are in the range [0…1], including hue.
vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

// All components are in the range [0…1], including hue.
vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void fragment() {
	vec3 hsv = rgb2hsv(COLOR.rgb);

	if ( fract(abs( hsv.x - TIME/30.0 )) < 0.3) {
		vec2 offset_uv = fract(vec2(UV.x, UV.y+TIME/50.0));
		hsv.z = hsv.z * ( 0.75 + texture(noise, offset_uv).x * 0.5);
	}

	float sparkle_frame = mod(- UV.x + UV.y + TIME * 5.0, 40);
	if ( sparkle_frame <= 0.1 ) {
		hsv.z =  1.0;
	}


	hsv.x += TIME / 20.0;
	COLOR.rgb = hsv2rgb(hsv);
}
